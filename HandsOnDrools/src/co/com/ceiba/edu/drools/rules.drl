package co.com.ceiba.edu.drools

import java.util.Date
import java.util.List

global java.util.List serversAvailability;

declare Server
   name : String
   processors : int
   memory : int 
   diskSpace : int 
   virtualizations : List 
   cpuUsage : int 
end

declare ServerStatus
	name : String
	freeMemory : int
	percentageFreeMemory : int
	freeDiskSpace : int
	percentageFreeDiskSpace : int
	currentCpuUsage : int
end

declare Virtualization
    name : String
    diskSpace : int
    memory : int
end

rule "Verificar la configuración mínima de un servidor"
dialect "mvel"
when
	$server : Server(processors < 2 || memory<=1024 || diskSpace<=250)
then
	System.out.println("El servidor \"" + $server.name + "\" fue rechazado porque no tiene la configuración mínima.");
	retract($server);
end

rule "Verificar si existe un servidor para ser virtualizado."
dialect "mvel"
when
	$virtualization : Virtualization()
	$server : Server($memory : memory, $diskSpace : diskSpace, virtualizations !=null)
	$freeMemory : Number(intValue > 0) from accumulate (Virtualization($vmemory : memory) from $server.virtualizations,
											init(int total = $memory - $virtualization.memory),
											action(total -= $vmemory;),
                              				reverse(total += $vmemory;),
                              				result(total))
	$freeDiskSpace : Number(intValue > 0) from accumulate (Virtualization($vdiskSpace : diskSpace) from $server.virtualizations,
											init(int total = $diskSpace - $virtualization.diskSpace),
											action(total -= $vdiskSpace;),
                              				reverse(total += $vdiskSpace;),
                              				result(total))
then
	ServerStatus serverStatus = new ServerStatus();
	serverStatus.name = $server.name;
	serverStatus.freeMemory = $freeMemory;
	serverStatus.percentageFreeMemory = $freeMemory * 100 / $memory;
	serverStatus.freeDiskSpace = $freeDiskSpace;
	serverStatus.percentageFreeDiskSpace = $freeDiskSpace * 100 / $memory;
	serversAvailability.add(serverStatus);
end
